import groovy.json.JsonSlurper

ext.custmizeSerenityReport = {
    copy {
        from "$runner.projectRootPath" + "/src/test/resources/img/logo.svg"
        into "$runner.projectRootPath" + "/target/site/serenity/images"
    }
    File myFile = new File("$runner.projectRootPath" + "/target/site/serenity/index.html")
    String newText = '<span class="projecttitle" style="font-family: cursive;top: 50px;left: 9%;font-weight: bolder;color: black;font-size: 2.2em;">' + runner.reportName + '</span>\n' + '<img alt="Logo" src="images/logo.svg" style="/* background: #006bff; */"><span class="projectname" style="margin-top: 20px;border-top-width: 2px;margin-right: 20px;">' + '<span class="projectsubtitle" style="font-family: auto;">Ambiente: ' + runner.buildProfile.toUpperCase() + '</span>'
    String fileText = myFile.text
    fileText = (fileText =~ /<span class="projectname">/).replaceFirst(newText)
    fileText = (fileText =~ /<span class="projectname">.*<\/span>/).replaceFirst('')
    myFile.write(fileText)
//    System.print(rootProject.file("$runner.projectRootPath" + "/target/site/serenity/index.html").text + "\n")
}

ext.setup = {
    if (System.getProperty('environment') == 'pro') {
        runner.cucumberOptions = "--tags '@layer:backend and @smoke-test and @execution:automatic and not @bug-type:known-issue and not @ignore'"
    }
    println "               ╔══╗ \n" +
            "               ║██║ \n" +
            "               ║(O)║♫ ♪ ♫ ♪\n" +
            "               ╚══╝\n" +
            "               ▄ █ ▄ █ ▄ ▄ █ ▄ █ ▄ █\n" +
            "               Min- - - - - - - - - - - -●Max\n"
    println "[INFO] RUNNING 🇦​🇺​🇹​🇴​🇲​🇦​🇹🇮​🇴🇳 🇵​🇷​🇴🇯​🇪​🇨🇹"
    println "[INFO] PROJECT PATH: $runner.projectRootPath"
    println "[INFO] PROJECT NAME: $runner.projectName"
    println "[INFO] ENVIRONMENT: $runner.buildProfile"
    println "[INFO] CUCUMBER OPTIONS: $runner.cucumberOptions"
    println "[INFO] TESTRAIL ENABLED:  ${testrailEnable}"
}

ext.curl = { url, headers ->
    def cmd = ['curl', url.toURL()]
    def headersArray = headers.split(',')
    for (String header in headersArray) {
        cmd.add('--header')
        cmd.add(header)
    }
    def exec = execute(cmd)
    def json = new JsonSlurper().parseText(exec.text)
    return json
}

ext.printEnv = {
    def exec = execute('env')
    System.print(exec.text)
}

ext.execute = { cmd ->
    def exec = cmd.execute()
    Thread.start { System.err << exec.err }
    exec.waitFor()
    return exec
}

task printenv(type: Exec) {
    commandLine 'env'
}
